{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Roberth/BlogEngineFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { url_api } from \"src/app/app-constants\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nexport class LoginService {\n  constructor(http, cookies) {\n    this.http = http;\n    this.cookies = cookies;\n    this.apiURL = url_api + \"api/Acount/Login\";\n  }\n  LoginUsers(loginInterface) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      return yield _this.http.post(`${url_api}/api/Users`, loginInterface);\n    })();\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getTokenExpiration() {\n    return localStorage.getItem('tokenExpiration');\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('tokenExpiration');\n  }\n  isLoggedIn() {\n    var exp = this.getTokenExpiration();\n    if (!exp) {\n      //there is no token\n      return false;\n    }\n    var now = new Date().getTime();\n    var dateExp = new Date(exp);\n    if (now >= dateExp.getTime()) {\n      //Token is expired\n      localStorage.removeItem('token');\n      localStorage.removeItem('tokenExpiration');\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAASA,OAAO,QAAQ,uBAAuB;;;;AAO7C,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,IAAgB,EAAUC,OAAsB;IAAhD,SAAI,GAAJD,IAAI;IAAsB,YAAO,GAAPC,OAAO;IAF7C,WAAM,GAAGJ,OAAO,GAAG,kBAAkB;EAE0B;EAEnEK,UAAU,CAACC,cAA8B;IAAA;IAAA;MAC7C,aAAa,KAAI,CAACH,IAAI,CAACI,IAAI,CAAM,GAAGP,OAAO,YAAY,EAAEM,cAAc,CAAC;IAAC;EAC3E;EAEAE,QAAQ;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,kBAAkB;IAChB,OAAOF,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;EAChD;EAEAE,MAAM;IACJH,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;IAChCJ,YAAY,CAACI,UAAU,CAAC,iBAAiB,CAAC;EAC5C;EAEAC,UAAU;IACR,IAAIC,GAAG,GAAG,IAAI,CAACJ,kBAAkB,EAAE;IAEnC,IAAG,CAACI,GAAG,EAAC;MACN;MACA,OAAO,KAAK;;IAGd,IAAIC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAC9B,IAAIC,OAAO,GAAG,IAAIF,IAAI,CAACF,GAAG,CAAC;IAE3B,IAAIC,GAAG,IAAIG,OAAO,CAACD,OAAO,EAAE,EAAC;MAC3B;MACAT,YAAY,CAACI,UAAU,CAAC,OAAO,CAAC;MAChCJ,YAAY,CAACI,UAAU,CAAC,iBAAiB,CAAC;MAC1C,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAEf;;AA1CaZ,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAmB,SAAZnB,YAAY;EAAAoB,YAFX;AAAM","names":["url_api","LoginService","constructor","http","cookies","LoginUsers","loginInterface","post","getToken","localStorage","getItem","getTokenExpiration","logout","removeItem","isLoggedIn","exp","now","Date","getTime","dateExp","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Roberth\\BlogEngineFront\\src\\services\\login.services.ts"],"sourcesContent":["import { Injectable, Inject } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { CookieService } from \"ngx-cookie-service\";\r\nimport { url_api } from \"src/app/app-constants\";\r\nimport { Observable } from \"rxjs\";\r\nimport { LoginInterface } from \"src/components/login/login.class\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class LoginService {\r\n\r\n    private apiURL = url_api + \"api/Acount/Login\";\r\n\r\n    constructor(private http: HttpClient, private cookies: CookieService) {}\r\n\r\n  async LoginUsers(loginInterface: LoginInterface): Promise<Observable<any>>{\r\n    return await this.http.post<any>(`${url_api}/api/Users`, loginInterface);\r\n  }\r\n\r\n  getToken() : string | null{\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  getTokenExpiration() : string | null{\r\n    return localStorage.getItem('tokenExpiration');\r\n  }\r\n\r\n  logout(){\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('tokenExpiration');\r\n  }\r\n\r\n  isLoggedIn() : boolean {\r\n    var exp = this.getTokenExpiration();\r\n\r\n    if(!exp){\r\n      //there is no token\r\n      return false;\r\n    }\r\n\r\n    var now = new Date().getTime();\r\n    var dateExp = new Date(exp);\r\n\r\n    if( now >= dateExp.getTime()){\r\n      //Token is expired\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('tokenExpiration');\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}