{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Roberth/source/repos/BlogEngineApp/BlogEngineFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HttpHeaders } from \"@angular/common/http\";\nimport { url_api } from \"src/app/app-constants\";\nimport { catchError } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"@angular/router\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class LoginService {\n  constructor(http, cookies, router) {\n    this.http = http;\n    this.cookies = cookies;\n    this.router = router;\n  }\n  LoginUsers(loginInterface) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log(loginInterface);\n      return yield _this.http.post(`${url_api}/api/Account/Login`, loginInterface, httpOptions).pipe(catchError(_this.ErrorHandler));\n    })();\n  }\n  GetToken() {\n    return localStorage.getItem('token');\n  }\n  GetExpirationToken() {\n    return localStorage.getItem('expiration_token');\n  }\n  isLoggedIn() {\n    var exp = this.GetToken();\n    if (!exp) {\n      //there is no expiration token\n      console.log(exp);\n      return false;\n    }\n    var now = new Date().getTime();\n    var dateExp = new Date(exp);\n    if (now >= dateExp.getTime()) {\n      //token is expired\n      localStorage.removeItem('token');\n      localStorage.removeItem('epiration_token');\n      return false;\n    } else {\n      return true;\n    }\n  }\n  ErrorHandler(error) {\n    console.log(error.message);\n    return error.message;\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.Router));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AACA,SAAqBA,WAAW,QAA2B,sBAAsB;AAEjF,SAASC,OAAO,QAAQ,uBAAuB;AAI/C,SAAUC,UAAU,QAAQ,gBAAgB;;;;;AAG5C,MAAMC,WAAW,GAAG;EAClBC,OAAO,EAAE,IAAIJ,WAAW,CAAC;IAAE,cAAc,EAAE;EAAkB,CAAC;CAC/D;AAKC,OAAM,MAAOK,YAAY;EAEvBC,YAAoBC,IAAgB,EACdC,OAAsB,EACtBC,MAAc;IAFhB,SAAI,GAAJF,IAAI;IACF,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;EACb;EAEXC,UAAU,CAACC,cAA8B;IAAA;IAAA;MAE7CC,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;MAE3B,aAAa,KAAI,CAACJ,IAAI,CAACO,IAAI,CAAM,GAAGb,OAAO,oBAAoB,EAAEU,cAAc,EAAER,WAAW,CAAC,CAC1EY,IAAI,CAACb,UAAU,CAAC,KAAI,CAACc,YAAY,CAAC,CAAC;IAAA;EACtD;EAEAC,QAAQ;IACN,OAAOC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAC,kBAAkB;IAChB,OAAOF,YAAY,CAACC,OAAO,CAAC,kBAAkB,CAAC;EACjD;EAEAE,UAAU;IACR,IAAIC,GAAG,GAAG,IAAI,CAACL,QAAQ,EAAE;IACzB,IAAG,CAACK,GAAG,EAAE;MACP;MACAV,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC;MAEhB,OAAO,KAAK;;IAGd,IAAIC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAC9B,IAAIC,OAAO,GAAG,IAAIF,IAAI,CAACF,GAAG,CAAC;IAE3B,IAAGC,GAAG,IAAIG,OAAO,CAACD,OAAO,EAAE,EAAE;MAC3B;MACAP,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;MAChCT,YAAY,CAACS,UAAU,CAAC,iBAAiB,CAAC;MAC1C,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAGf;EAEAX,YAAY,CAACY,KAAwB;IACnChB,OAAO,CAACC,GAAG,CAACe,KAAK,CAACC,OAAO,CAAC;IAE1B,OAAOD,KAAK,CAACC,OAAO;EACxB;;AAlDaxB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAyB,SAAZzB,YAAY;EAAA0B,YAFX;AAAM","names":["HttpHeaders","url_api","catchError","httpOptions","headers","LoginService","constructor","http","cookies","router","LoginUsers","loginInterface","console","log","post","pipe","ErrorHandler","GetToken","localStorage","getItem","GetExpirationToken","isLoggedIn","exp","now","Date","getTime","dateExp","removeItem","error","message","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Roberth\\source\\repos\\BlogEngineApp\\BlogEngineFront\\src\\services\\login.services.ts"],"sourcesContent":["import { Injectable, Inject } from \"@angular/core\";\r\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from \"@angular/common/http\";\r\nimport { CookieService } from \"ngx-cookie-service\";\r\nimport { url_api } from \"src/app/app-constants\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { LoginInterface } from \"src/components/login/login.class\";\r\nimport { Router } from \"@angular/router\";\r\nimport {  catchError } from \"rxjs/operators\";\r\n\r\n\r\nconst httpOptions = {\r\n  headers: new HttpHeaders({ 'Content-Type': 'application/json'})\r\n};\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class LoginService {\r\n\r\n    constructor(private http: HttpClient, \r\n                  private cookies: CookieService,\r\n                  private router: Router\r\n                ) {}\r\n\r\n  async LoginUsers(loginInterface: LoginInterface): Promise<Observable<any>>{\r\n\r\n    console.log(loginInterface);\r\n\r\n    return await this.http.post<any>(`${url_api}/api/Account/Login`, loginInterface, httpOptions)\r\n                      .pipe(catchError(this.ErrorHandler))\r\n    }\r\n\r\n    GetToken(){\r\n      return localStorage.getItem('token');\r\n    }\r\n\r\n    GetExpirationToken() {\r\n      return localStorage.getItem('expiration_token');\r\n    }\r\n\r\n    isLoggedIn(): boolean {\r\n      var exp = this.GetToken();\r\n      if(!exp) {\r\n        //there is no expiration token\r\n        console.log(exp);\r\n        \r\n        return false;\r\n      }\r\n\r\n      var now = new Date().getTime();\r\n      var dateExp = new Date(exp);\r\n\r\n      if(now >= dateExp.getTime()) {\r\n        //token is expired\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('epiration_token');\r\n        return false;\r\n      } else {\r\n        return true;\r\n        \r\n      }\r\n    }\r\n\r\n    ErrorHandler(error: HttpErrorResponse) {\r\n      console.log(error.message);\r\n      \r\n      return error.message;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}