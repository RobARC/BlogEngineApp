{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/Roberth/BlogEngineFront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { url_api } from \"src/app/app-constants\";\nimport { BehaviorSubject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"ngx-cookie-service\";\nimport * as i3 from \"@angular/router\";\nexport class LoginService {\n  constructor(http, cookies, router) {\n    this.http = http;\n    this.cookies = cookies;\n    this.router = router;\n    this.apiURL = url_api + \"api/Users\";\n    this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')));\n    this.user = this.userSubject.asObservable();\n  }\n  LoginUsers(loginInterface) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      console.log(loginInterface);\n      _this.getToken();\n      _this.getTokenExpiration();\n      return yield _this.http.post(`${url_api}/api/Users`, loginInterface);\n    })();\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getTokenExpiration() {\n    return localStorage.getItem('tokenExpiration');\n  }\n  logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('tokenExpiration');\n  }\n  isLoggedIn() {\n    var exp = this.getTokenExpiration();\n    if (!exp) {\n      //there is no token\n      return false;\n    }\n    var now = new Date().getTime();\n    var dateExp = new Date(exp);\n    if (now >= dateExp.getTime()) {\n      //Token is expired\n      localStorage.removeItem('token');\n      localStorage.removeItem('tokenExpiration');\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nLoginService.ɵfac = function LoginService_Factory(t) {\n  return new (t || LoginService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.CookieService), i0.ɵɵinject(i3.Router));\n};\nLoginService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: LoginService,\n  factory: LoginService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";AAGA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAAqBC,eAAe,QAAQ,MAAM;;;;;AAQhD,OAAM,MAAOC,YAAY;EAMvBC,YAAoBC,IAAgB,EACdC,OAAsB,EACtBC,MAAc;IAFhB,SAAI,GAAJF,IAAI;IACF,YAAO,GAAPC,OAAO;IACP,WAAM,GAANC,MAAM;IANpB,WAAM,GAAGN,OAAO,GAAG,WAAW;IAOtB,IAAI,CAACO,WAAW,GAAG,IAAIN,eAAe,CAACO,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAE,CAAC,CAAC;IACjF,IAAI,CAACC,IAAI,GAAG,IAAI,CAACL,WAAW,CAACM,YAAY,EAAE;EAG/C;EAGRC,UAAU,CAACC,cAA8B;IAAA;IAAA;MAE7CC,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;MAE3B,KAAI,CAACG,QAAQ,EAAE;MACf,KAAI,CAACC,kBAAkB,EAAE;MAEzB,aAAa,KAAI,CAACf,IAAI,CAACgB,IAAI,CAAM,GAAGpB,OAAO,YAAY,EAAEe,cAAc,CAAC;IAAC;EAC3E;EAEAG,QAAQ;IACN,OAAOR,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAQ,kBAAkB;IAChB,OAAOT,YAAY,CAACC,OAAO,CAAC,iBAAiB,CAAC;EAChD;EAEAU,MAAM;IACJX,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;IAChCZ,YAAY,CAACY,UAAU,CAAC,iBAAiB,CAAC;EAC5C;EAEAC,UAAU;IACR,IAAIC,GAAG,GAAG,IAAI,CAACL,kBAAkB,EAAE;IAEnC,IAAG,CAACK,GAAG,EAAC;MACN;MACA,OAAO,KAAK;;IAGd,IAAIC,GAAG,GAAG,IAAIC,IAAI,EAAE,CAACC,OAAO,EAAE;IAC9B,IAAIC,OAAO,GAAG,IAAIF,IAAI,CAACF,GAAG,CAAC;IAE3B,IAAIC,GAAG,IAAIG,OAAO,CAACD,OAAO,EAAE,EAAC;MAC3B;MACAjB,YAAY,CAACY,UAAU,CAAC,OAAO,CAAC;MAChCZ,YAAY,CAACY,UAAU,CAAC,iBAAiB,CAAC;MAC1C,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAEf;;AA1DapB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAA2B,SAAZ3B,YAAY;EAAA4B,YAFX;AAAM","names":["url_api","BehaviorSubject","LoginService","constructor","http","cookies","router","userSubject","JSON","parse","localStorage","getItem","user","asObservable","LoginUsers","loginInterface","console","log","getToken","getTokenExpiration","post","logout","removeItem","isLoggedIn","exp","now","Date","getTime","dateExp","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Roberth\\BlogEngineFront\\src\\services\\login.services.ts"],"sourcesContent":["import { Injectable, Inject } from \"@angular/core\";\r\nimport { HttpClient } from \"@angular/common/http\";\r\nimport { CookieService } from \"ngx-cookie-service\";\r\nimport { url_api } from \"src/app/app-constants\";\r\nimport { Observable, BehaviorSubject } from \"rxjs\";\r\nimport { LoginInterface } from \"src/components/login/login.class\";\r\nimport { Router } from \"@angular/router\";\r\nimport { User } from \"src/models/User.model\";\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n  })\r\n  export class LoginService {\r\n\r\n    private apiURL = url_api + \"api/Users\";\r\n    private userSubject: BehaviorSubject <any>\r\n    private user: BehaviorSubject <any>\r\n\r\n    constructor(private http: HttpClient, \r\n                  private cookies: CookieService,\r\n                  private router: Router\r\n                ) { this.userSubject = new BehaviorSubject(JSON.parse(localStorage.getItem('user')!));\r\n                    this.user = this.userSubject.asObservable();\r\n\r\n\r\n                }\r\n\r\n\r\n  async LoginUsers(loginInterface: LoginInterface): Promise<Observable<any>>{\r\n\r\n    console.log(loginInterface);\r\n\r\n    this.getToken();\r\n    this.getTokenExpiration();\r\n\r\n    return await this.http.post<any>(`${url_api}/api/Users`, loginInterface);\r\n  }\r\n\r\n  getToken() : string | null{\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  getTokenExpiration() : string | null{\r\n    return localStorage.getItem('tokenExpiration');\r\n  }\r\n\r\n  logout(){\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('tokenExpiration');\r\n  }\r\n\r\n  isLoggedIn() : boolean {\r\n    var exp = this.getTokenExpiration();\r\n\r\n    if(!exp){\r\n      //there is no token\r\n      return false;\r\n    }\r\n\r\n    var now = new Date().getTime();\r\n    var dateExp = new Date(exp);\r\n\r\n    if( now >= dateExp.getTime()){\r\n      //Token is expired\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('tokenExpiration');\r\n      return false;\r\n    } else {\r\n      return true;\r\n    }\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}