{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./register.service\";\nimport * as i2 from \"./login.services\";\nimport * as i3 from \"@angular/router\";\nexport class AuthGuardService {\n  constructor(registerService, loginService, router) {\n    this.registerService = registerService;\n    this.loginService = loginService;\n    this.router = router;\n  }\n  canActivate() {\n    if (this.loginService.isLoggedIn()) {\n      this.router.navigate(['login']);\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nAuthGuardService.ɵfac = function AuthGuardService_Factory(t) {\n  return new (t || AuthGuardService)(i0.ɵɵinject(i1.RegisterService), i0.ɵɵinject(i2.LoginService), i0.ɵɵinject(i3.Router));\n};\nAuthGuardService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuardService,\n  factory: AuthGuardService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;;;AASA,OAAM,MAAOA,gBAAgB;EAE3BC,YACUC,eAAgC,EAChCC,YAA0B,EAC1BC,MAAc;IAFd,oBAAe,GAAfF,eAAe;IACf,iBAAY,GAAZC,YAAY;IACZ,WAAM,GAANC,MAAM;EACZ;EAEJC,WAAW;IACP,IAAI,IAAI,CAACF,YAAY,CAACG,UAAU,EAAE,EAAC;MACjC,IAAI,CAACF,MAAM,CAACG,QAAQ,CAAC,CAAC,OAAO,CAAC,CAAC;MAC/B,OAAO,KAAK;KACb,MAAM;MACL,OAAO,IAAI;;EAEjB;;AAfWP,gBAAgB;mBAAhBA,gBAAgB;AAAA;AAAhBA,gBAAgB;SAAhBA,gBAAgB;EAAAQ,SAAhBR,gBAAgB;EAAAS,YAFf;AAAM","names":["AuthGuardService","constructor","registerService","loginService","router","canActivate","isLoggedIn","navigate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Roberth\\source\\repos\\BlogEngineApp\\BlogEngineFront\\src\\services\\auth-guard.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { RegisterService } from './register.service';\nimport { LoginService } from './login.services';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuardService implements CanActivate{\n\n  constructor( \n    private registerService: RegisterService,\n    private loginService: LoginService,\n    private router: Router\n  ) { }\n\n  canActivate(): boolean | Observable<boolean> {\n      if( this.loginService.isLoggedIn()){\n        this.router.navigate(['login']);\n        return false;\n      } else {\n        return true;\n      }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}