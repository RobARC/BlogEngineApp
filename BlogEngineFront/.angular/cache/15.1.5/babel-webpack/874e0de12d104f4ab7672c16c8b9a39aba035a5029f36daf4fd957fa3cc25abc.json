{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./login.services\";\nexport class AuthInterceptorService {\n  constructor(loginService) {\n    this.loginService = loginService;\n  }\n  intercept(req, next) {\n    var token = this.loginService.GetToken();\n    req = req.clone({\n      setHeaders: {\n        Authorization: 'Bearer ' + token\n      }\n    });\n    return next.handle(req);\n  }\n}\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.LoginService));\n};\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAQA,OAAM,MAAOA,sBAAsB;EAEjCC,YAAoBC,YAA0B;IAA1B,iBAAY,GAAZA,YAAY;EAAkB;EAElDC,SAAS,CAACC,GAAqB,EAAEC,IAAiB;IAC9C,IAAIC,KAAK,GAAG,IAAI,CAACJ,YAAY,CAACK,QAAQ,EAAE;IACxCH,GAAG,GAAGA,GAAG,CAACI,KAAK,CAAC;MACdC,UAAU,EAAE;QAACC,aAAa,EAAE,SAAS,GAAGJ;MAAK;KAClD,CAAC;IACF,OAAOD,IAAI,CAACM,MAAM,CAACP,GAAG,CAAC;EACvB;;AAVWJ,sBAAsB;mBAAtBA,sBAAsB;AAAA;AAAtBA,sBAAsB;SAAtBA,sBAAsB;EAAAY,SAAtBZ,sBAAsB;EAAAa,YAFrB;AAAM","names":["AuthInterceptorService","constructor","loginService","intercept","req","next","token","GetToken","clone","setHeaders","Authorization","handle","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\Roberth\\BlogEngineFront\\src\\services\\auth-interceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { LoginService } from './login.services';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthInterceptorService implements HttpInterceptor {\n\n  constructor(private loginService: LoginService) { }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n      var token = this.loginService.GetToken();\n      req = req.clone({\n        setHeaders: {Authorization: 'Bearer ' + token}\n  });\n  return next.handle(req);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}